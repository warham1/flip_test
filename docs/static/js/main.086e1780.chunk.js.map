{"version":3,"sources":["apolloclient.js","TileButton.js","View.js","Head.js","App.js","index.js"],"names":["httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_ref","query","_getMainDefinition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","getColor","num","TileButton","tileIdProp","tileColorProp","updateTile","console","log","react_default","a","createElement","className","onClick","style","background","GET_TILES_QUERY","gql","_templateObject","ON_CHANGE_TILE_QUERY","_templateObject2","UPDATE_TILE","_templateObject3","changeColor","View","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tileId","tileColor","variables","genButtons","temp","index","state","tiles","length","push","src_TileButton_0","id","data","subscribeToMore","document","updateQuery","prev","subscriptionData","onChangeTile","objectSpread","nextprops","setState","getTiles","loading","Component","withTileData","graphql","MutateData","name","compose","src_Head","App","react_apollo_esm","ApolloContext","src_View_0","ReactDOM","render","App_App","getElementById"],"mappings":"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","file":"static/js/main.086e1780.chunk.js","sourcesContent":["import {ApolloClient, HttpLink, split} from 'apollo-boost';\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\n\r\nconst httpLink = new HttpLink({\r\n    uri: \"http://localhost:4000\"\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n    uri: `ws://localhost:4000`,\r\n    options: {\r\n        reconnect: true\r\n    }\r\n});\r\n\r\nconst link = split(\r\n    ({query}) => {\r\n        const { kind, operation } = getMainDefinition(query);\r\n        return kind === \"OperationDefinition\" && operation === \"subscription\";\r\n    },\r\n    wsLink,\r\n    httpLink\r\n);\r\n\r\nconst client = new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nexport default client;","import React from \"react\";\r\nimport \"./TileButton.css\"\r\n\r\nconst getColor = num => {\r\n    switch(num) {\r\n        case 0:\r\n            return \"Black\";\r\n        case 1:\r\n            return \"Red\";\r\n        case 2:\r\n            return \"Blue\";\r\n        \r\n        default:\r\n            return \"Black\";\r\n    }\r\n}\r\n\r\nconst TileButton = ({tileIdProp, tileColorProp, updateTile}) => \r\n{\r\n    console.log(tileIdProp);\r\n    \r\n    return(\r\n            <button \r\n                className=\"tile\"\r\n                onClick={ () => { updateTile(tileIdProp, tileColorProp) } }\r\n                style={{background: getColor(tileColorProp)}}>\r\n            </button>\r\n        )\r\n}\r\n\r\nexport default TileButton;","import React, {Component} from 'react';\r\nimport gql from \"graphql-tag\";\r\nimport { graphql, compose} from \"react-apollo\";\r\nimport  TileButton  from \"./TileButton\";\r\nimport  \"./View.css\";\r\n\r\nconst GET_TILES_QUERY = gql`\r\n    query GetTiles($id: Int){\r\n        getTiles(id: $id) {\r\n            id\r\n            tileColor\r\n        }\r\n    }\r\n`;\r\n\r\nconst ON_CHANGE_TILE_QUERY = gql`\r\n    subscription {\r\n        onChangeTile {\r\n            id\r\n            tileColor\r\n        }\r\n    }\r\n`;\r\n\r\nconst UPDATE_TILE = gql`\r\n    mutation UpdateTile($tileId: Int!, $tileColor: Int!) {\r\n        updateTile(tileId: $tileId, tileColor: $tileColor) {\r\n            val\r\n        }\r\n    }\r\n`;\r\n\r\nconst changeColor = num => {\r\n    switch(num) {\r\n        case 0:\r\n            return 1;\r\n        case 1:\r\n            return 2;\r\n        case 2:\r\n            return 1;\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\n\r\nclass View extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            tiles : []\r\n        };        \r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.data.subscribeToMore({\r\n            document: ON_CHANGE_TILE_QUERY,\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                if(!subscriptionData.data) return prev;\r\n                const { onChangeTile } = subscriptionData.data;\r\n                return {\r\n                    ...prev\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    updateTile = (tileId, tileColor) => {\r\n        this.props.updateTile(\r\n            {variables: { tileId: tileId ,tileColor: changeColor(tileColor)}});\r\n    }\r\n\r\n    componentWillReceiveProps(nextprops) {\r\n        this.setState({tiles: nextprops.data.getTiles});\r\n    }\r\n\r\n    genButtons = () => {     \r\n        let temp = [];\r\n            for (let index = 0; index < this.state.tiles.length; index++) {\r\n                temp.push(\r\n                    <TileButton tileIdProp={this.state.tiles[index].id} \r\n                    tileColorProp={this.state.tiles[index].tileColor} \r\n                    updateTile={ this.updateTile}/>   \r\n                );\r\n            }       \r\n        return temp;\r\n    }\r\n\r\n    render() {\r\n        const {data: {loading}} = this.props;\r\n\r\n        if(loading) {\r\n            return (\r\n                <div className = \"tile-container\">\r\n                    Loading~~\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className = \"tile-container\">\r\n                {this.genButtons()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst withTileData = graphql(GET_TILES_QUERY);\r\nconst MutateData = graphql(UPDATE_TILE, {name: \"updateTile\"});\r\n\r\nexport default compose(withTileData, MutateData)(View);","import React from \"react\"\r\nimport \"./Head.css\"\r\n\r\nexport default () => {\r\n    return (\r\n        <div className = \"Head\">\r\n            &nbsp;\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider} from \"react-apollo-hooks\";\nimport client from \"./apolloclient\";\nimport View from \"./View\";\nimport Head from \"./Head\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  render() {\n    return (\n     <ApolloProvider client={client}>\n       <ApolloHooksProvider client = {client}>\n        <Head/>\n        <View/>\n       </ApolloHooksProvider>\n     </ApolloProvider>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}